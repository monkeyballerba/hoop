-- Assuming 'library' is your loaded UI lib

-- Create window
local window = library:CreateWindow({
    Title = "üèÄ Arcade Basketball",
    Size = UDim2.new(0, 300, 0, 230),
    Theme = "Informant_V1" -- or any of the themes you showed
})

-- Add toggle (pseudo code - adjust if your library function names differ)
local autoGreenToggle = window:AddToggle({
    Text = "Enable Auto Green",
    Default = false,
    Callback = function(value)
        autoGreen = value
        print("Auto Green toggled:", value)
    end
})

-- Add slider (pseudo code)
local glideSlider = window:AddSlider({
    Text = "Dribble Glide Speed",
    Default = glideSpeed,
    Min = 10,
    Max = 150,
    Increment = 1,
    Callback = function(value)
        glideSpeed = value
        print("Glide speed changed:", glideSpeed)
    end
})

-- Bind glide key
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.G then
        if root then
            root.Velocity = root.CFrame.LookVector * glideSpeed + Vector3.new(0, 20, 0)
        end
    end
end)

-- Hookmetamethod for Auto Green (keep your original code)
local bb
bb = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}
    if not checkcaller() and method == "FireServer" and tostring(self) == "Shoot" then
        if autoGreen and args[1] == false then
            args[2] = -0.98
        end
    end
    return bb(self, unpack(args))
end))
    local function UpdateSlider(inputX)
        local relativeX = math.clamp(inputX - sliderFrame.Object.Position.X, 0, barBack.Object.Size.X)
        local percent = relativeX / barBack.Object.Size.X
        local val = math.floor(min + percent * (max - min))
        barFill.Object.Size = UDim2.new(percent, 0, 0, 8)
        label.Object.Text = "Dribble Glide Speed: " .. val
        callback(val)
    end

    sliderFrame.MouseButton1Down:Connect(function(inputPos)
        dragging = true
        UpdateSlider(inputPos.X)
    end)

    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            UpdateSlider(input.Position.X)
        end
    end)

    UIS.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    sliderFrame.Parent = parent
    table.insert(parent.Children, sliderFrame)

    return sliderFrame
end

-- Create main window
local windowPos = UDim2.new(0.5, -150, 0.5, -115)
local windowSize = UDim2.new(0, 300, 0, 230)

local windowFrame = library.utility:Draw("Square", {
    Position = windowPos,
    Size = windowSize,
    Visible = true,
    ThemeColor = "Background",
    Class = "Window"
})
windowFrame.Children = {}

-- Title
local title = library.utility:Draw("Text", {
    Position = UDim2.new(0, 0, 0, 5),
    Size = UDim2.new(1, 0, 0, 30),
    Text = "üèÄ Arcade Basketball",
    Visible = true,
    ThemeColor = "Primary Text",
    Font = Enum.Font.GothamBold,
    TextSize = 22
})
title.Parent = windowFrame
table.insert(windowFrame.Children, title)

-- Auto Green Toggle
local autoGreenToggle = CreateToggle(windowFrame, UDim2.new(0, 10, 0, 40), "Auto Green", autoGreen, function(val)
    autoGreen = val
end)

-- Glide Speed Slider
local glideSpeedSlider = CreateSlider(windowFrame, UDim2.new(0, 10, 0, 90), 10, 150, glideSpeed, function(val)
    glideSpeed = val
end)

--// Glide key binding
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.G and root then
        root.Velocity = root.CFrame.LookVector * glideSpeed + Vector3.new(0, 20, 0)
    end
end)

--// Hook for Auto Green
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}
    if not checkcaller() and method == 'FireServer' and tostring(self) == 'Shoot' then
        if autoGreen and args[1] == false then
            args[2] = -0.98
        end
    end
    return oldNamecall(self, unpack(args))
end))        callback(val)
    end
    
    sliderFrame.MouseButton1Down:Connect(function(inputPos)
        dragging = true
        UpdateSlider(inputPos.X)
    end)
    
    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            UpdateSlider(input.Position.X)
        end
    end)
    
    UIS.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    return sliderFrame
end

-- Create main window
local windowPos = UDim2.new(0.5, -150, 0.5, -115)
local windowSize = UDim2.new(0, 300, 0, 230)

local windowFrame = library.utility:Draw('Square', {
    Position = windowPos,
    Size = windowSize,
    Visible = true,
    ThemeColor = "Background",
    Class = "Window"
})

-- Title
local title = library.utility:Draw('Text', {
    Position = UDim2.new(0, 0, 0, 5),
    Size = UDim2.new(1, 0, 0, 30),
    Text = "üèÄ Arcade Basketball",
    Visible = true,
    ThemeColor = "Primary Text",
    Font = 2,
    TextSize = 22,
    Class = "Text"
})
title.Parent = windowFrame
table.insert(windowFrame.Children, title)

-- Auto Green Toggle
local autoGreenToggle = CreateToggle(windowFrame, UDim2.new(0, 10, 0, 40), "Auto Green", autoGreen, function(val)
    autoGreen = val
end)
autoGreenToggle.Parent = windowFrame
table.insert(windowFrame.Children, autoGreenToggle)

-- Glide Speed Slider
local glideSpeedSlider = CreateSlider(windowFrame, UDim2.new(0, 10, 0, 90), 10, 150, glideSpeed, function(val)
    glideSpeed = val
end)
glideSpeedSlider.Parent = windowFrame
table.insert(windowFrame.Children, glideSpeedSlider)

--// Glide key binding
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.G and root then
        root.Velocity = root.CFrame.LookVector * glideSpeed + Vector3.new(0, 20, 0)
    end
end)

--// Hook for Auto Green
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}
    if not checkcaller() and method == 'FireServer' and tostring(self) == 'Shoot' then
        if autoGreen and args[1] == false then
            args[2] = -0.98
        end
    end
    return oldNamecall(self, unpack(args))
end))
