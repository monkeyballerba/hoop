-- ⚠️ Load Rayfield UI Library local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- 🪟 Create Window local Window = Rayfield:CreateWindow({ Name = "🏀 Arcade BB 🏀", LoadingTitle = "Loading GUI...", LoadingSubtitle = "by Lazy", ConfigurationSaving = { Enabled = true, FolderName = "ArcadeBB", FileName = "ArcadeBB_Config" }, Discord = { Enabled = true, Invite = "ura", RememberJoins = true }, KeySystem = false, ToggleUIKeybind = Enum.KeyCode.K })

-- ⚙️ Variables local autoGreen = false local walkSpeed = 16 local glidePower = 50 local plr = game.Players.LocalPlayer local RunService = game:GetService("RunService") local ReplicatedStorage = game:GetService("ReplicatedStorage") local UserInputService = game:GetService("UserInputService")

-- 📁 Main Tab local MainTab = Window:CreateTab("Main", 1234567890)

-- 🔘 Auto Green Toggle MainTab:CreateToggle({ Name = "Auto Green", CurrentValue = false, Flag = "AutoGreenToggle", Callback = function(val) autoGreen = val end })

-- 🢍 WalkSpeed Slider MainTab:CreateSlider({ Name = "WalkSpeed", Range = {5, 100}, Increment = 1, Suffix = "Speed", CurrentValue = walkSpeed, Flag = "SpeedSlider", Callback = function(val) walkSpeed = val local human = plr.Character and plr.Character:FindFirstChild("Humanoid") if human then human.WalkSpeed = val end end })

-- ✈️ Dribble Glide Power Slider MainTab:CreateSlider({ Name = "Dribble Glide Power", Range = {10, 200}, Increment = 5, Suffix = "Glide", CurrentValue = glidePower, Flag = "GlideSlider", Callback = function(val) glidePower = val end })

-- 🔵 Auto Green Hook local mt = getrawmetatable(game) setreadonly(mt, false) local oldNamecall = mt.__namecall

mt.__namecall = newcclosure(function(self, ...) local method = getnamecallmethod() local args = { ... }

if not checkcaller() then
    if method == "FireServer" and tostring(self) == "Shoot" and autoGreen then
        args[2] = -0.98
        return oldNamecall(self, unpack(args))
    end

    -- No Cooldown Patch
    if tostring(self):lower():find("cooldown") then
        return nil
    end
end

return oldNamecall(self, ...)

end)

-- 🛎️ Dribble Glide Logic local lastDribbleTime = 0 local glideDuration = 0.5 -- smoother feel local dribbleRemote = ReplicatedStorage:FindFirstChild("Dribble") or ReplicatedStorage:FindFirstChildWhichIsA("RemoteEvent", true)

if dribbleRemote then dribbleRemote.OnClientEvent:Connect(function(...) local root = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") if root and tick() - lastDribbleTime > 0.3 then lastDribbleTime = tick() local direction = root.CFrame.LookVector root.Velocity = Vector3.new(direction.X, 0, direction.Z) * glidePower + Vector3.new(0, 18, 0) end end) end

-- 🧳 Anti-AFK pcall(function() local vu = game:GetService("VirtualUser") plr.Idled:Connect(function() vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame) wait(1) vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame) end) end)

-- 🌀 Ball Magnet RunService.Heartbeat:Connect(function() local ball = workspace:FindFirstChild("Basketball") local root = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") if ball and root and (ball.Position - root.Position).Magnitude < 25 then ball.Position = root.Position + Vector3.new(0, 1.5, 0) end end)

-- 🚶️ Maintain Speed RunService.Heartbeat:Connect(function() local human = plr.Character and plr.Character:FindFirstChild("Humanoid") if human then human.WalkSpeed = walkSpeed end end)

-- 📂 Load Config Rayfield:LoadConfiguration()

