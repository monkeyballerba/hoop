-- ⚠️ Load Rayfield UI Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- 🪟 Create Window
local Window = Rayfield:CreateWindow({
    Name = "🏀 Arcade BB 🏀",
    LoadingTitle = "Loading GUI...",
    LoadingSubtitle = "by Lazy",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ArcadeBB",
        FileName = "ArcadeBB_Config"
    },
    Discord = {
        Enabled = true,
        Invite = "ura",
        RememberJoins = true
    },
    KeySystem = false,
    ToggleUIKeybind = Enum.KeyCode.K
})

-- ⚙️ Variables
local autoGreen = false
local walkSpeed = 16
local glidePower = 50
local plr = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- 📁 Main Tab
local MainTab = Window:CreateTab("Main", 1234567890)

-- 🔘 Auto Green Toggle
MainTab:CreateToggle({
    Name = "Auto Green",
    CurrentValue = false,
    Flag = "AutoGreenToggle",
    Callback = function(val)
        autoGreen = val
    end
})

-- 🧍 WalkSpeed Slider
MainTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {5, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = walkSpeed,
    Flag = "SpeedSlider",
    Callback = function(val)
        walkSpeed = val
        local human = plr.Character and plr.Character:FindFirstChild("Humanoid")
        if human then
            human.WalkSpeed = val
        end
    end
})

-- ✈️ Glide Power Slider
MainTab:CreateSlider({
    Name = "Dribble Glide Power",
    Range = {10, 200},
    Increment = 5,
    Suffix = "Glide",
    CurrentValue = glidePower,
    Flag = "GlideSlider",
    Callback = function(val)
        glidePower = val
    end
})

-- 🟢 Auto Green Hook
local mt = getrawmetatable(game)
setreadonly(mt, false)
local oldNamecall = mt.__namecall

mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = { ... }

    if not checkcaller() and method == "FireServer" and tostring(self) == "Shoot" then
        if autoGreen then
            args[2] = -0.98
        end
        return oldNamecall(self, unpack(args))
    end

    return oldNamecall(self, ...)
end)

-- 🚶 Keep WalkSpeed active
RunService.Heartbeat:Connect(function()
    local human = plr.Character and plr.Character:FindFirstChild("Humanoid")
    if human then
        human.WalkSpeed = walkSpeed
    end
end)

-- 🏀 Dribble Glide Logic
local lastDribbleTime = 0

-- Hook into remote events to detect dribble
local dribbleRemote = ReplicatedStorage:FindFirstChild("Dribble") or ReplicatedStorage:FindFirstChildWhichIsA("RemoteEvent", true)

if dribbleRemote then
    dribbleRemote.OnClientEvent:Connect(function(...)
        local root = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
        if root and tick() - lastDribbleTime > 0.3 then -- small cooldown
            lastDribbleTime = tick()
            local direction = root.CFrame.LookVector
            root.Velocity = Vector3.new(direction.X, 0, direction.Z) * glidePower + Vector3.new(0, 20, 0)
        end
    end)
end

-- ✅ Load saved values
Rayfield:LoadConfiguration()
