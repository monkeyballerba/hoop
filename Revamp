-- ‚ö†Ô∏è Load Rayfield UI Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- ü™ü Create Window
local Window = Rayfield:CreateWindow({
	Name = "üèÄ Arcade BB üèÄ",
	LoadingTitle = "Loading Beta...",
	LoadingSubtitle = "by Lazy",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "ArcadeBB",
		FileName = "ArcadeBB_Config"
	},
	Discord = {
		Enabled = true,
		Invite = "ura",
		RememberJoins = true
	},
	KeySystem = false,
	ToggleUIKeybind = Enum.KeyCode.K
})

-- ‚öôÔ∏è Variables
local autoGreen = false
local walkSpeed = 16
local glidePower = 50
local glideDuration = 0.8
local glideCooldown = false
local plr = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")

-- üìÅ Main Tab
local MainTab = Window:CreateTab("Main", 1234567890)

-- üîò Auto Green Toggle
MainTab:CreateToggle({
	Name = "Auto Green",
	CurrentValue = false,
	Flag = "AutoGreenToggle",
	Callback = function(val)
		autoGreen = val
	end
})

-- üßç WalkSpeed Slider
MainTab:CreateSlider({
	Name = "WalkSpeed",
	Range = {5, 100},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = walkSpeed,
	Flag = "SpeedSlider",
	Callback = function(val)
		walkSpeed = val
		local human = plr.Character and plr.Character:FindFirstChild("Humanoid")
		if human then
			human.WalkSpeed = val
		end
	end
})

-- ‚úàÔ∏è Dribble Glide Power Slider
MainTab:CreateSlider({
	Name = "Dribble Glide Power",
	Range = {10, 200},
	Increment = 5,
	Suffix = "Glide",
	CurrentValue = glidePower,
	Flag = "GlideSlider",
	Callback = function(val)
		glidePower = val
	end
})

-- üü¢ Auto Green Hook
local mt = getrawmetatable(game)
setreadonly(mt, false)
local oldNamecall = mt.__namecall

mt.__namecall = newcclosure(function(self, ...)
	local method = getnamecallmethod()
	local args = { ... }

	if not checkcaller() and method == "FireServer" and tostring(self) == "Shoot" then  
		if autoGreen then  
			args[2] = -0.98  
		end  
		return oldNamecall(self, unpack(args))  
	end  

	return oldNamecall(self, ...)
end)

-- üö∂ Movement Loop
RunService.Heartbeat:Connect(function()
	local char = plr.Character
	local human = char and char:FindFirstChild("Humanoid")

	if human then
		human.WalkSpeed = walkSpeed
	end
end)

-- üèÄ Improved Dribble Glide Logic
local dribbleRemote = ReplicatedStorage:FindFirstChild("Dribble") or ReplicatedStorage:FindFirstChildWhichIsA("RemoteEvent", true)

if dribbleRemote then
	dribbleRemote.OnClientEvent:Connect(function()
		if glideCooldown then return end
		glideCooldown = true

		local char = plr.Character
		local hrp = char and char:FindFirstChild("HumanoidRootPart")
		local human = char and char:FindFirstChild("Humanoid")

		if hrp and human then
			local dir = hrp.CFrame.LookVector

			local bodyVel = Instance.new("BodyVelocity")
			bodyVel.Velocity = dir * glidePower * 2 -- stronger forward glide
			bodyVel.MaxForce = Vector3.new(1e5, 0, 1e5)
			bodyVel.P = 1e4
			bodyVel.Parent = hrp

			-- temporarily reduce friction for smooth glide
			local origFriction = hrp.CustomPhysicalProperties
			hrp.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0)

			task.delay(glideDuration, function()
				bodyVel:Destroy()
				hrp.CustomPhysicalProperties = origFriction
				glideCooldown = false
			end)
		else
			glideCooldown = false
		end
	end)
end

-- üîí Anti-AFK
plr.Idled:Connect(function()
	VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
	wait(1)
	VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)
