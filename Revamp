-- ‚ö†Ô∏è Load Rayfield UI Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- ü™ü Create Window
local Window = Rayfield:CreateWindow({
	Name = "üèÄ Arcade BB üèÄ",
	LoadingTitle = "Loading GUI...",
	LoadingSubtitle = "by Lazy",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "ArcadeBB",
		FileName = "ArcadeBB_Config"
	},
	Discord = {
		Enabled = true,
		Invite = "ura",
		RememberJoins = true
	},
	KeySystem = false,
	ToggleUIKeybind = Enum.KeyCode.K
})

-- ‚öôÔ∏è Variables
local autoGreen = false
local walkSpeed = 16
local glidePower = 50
local jumpPower = 50
local spinBot = false

local plr = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

-- üìÅ Tabs
local MainTab = Window:CreateTab("Main", 1234567890)
local ExtraTab = Window:CreateTab("Extras", 1234567890)
local CosmeticTab = Window:CreateTab("Cosmetics", 1234567890)

-- üîò Auto Green Toggle
MainTab:CreateToggle({
	Name = "Auto Green",
	CurrentValue = false,
	Flag = "AutoGreenToggle",
	Callback = function(val)
		autoGreen = val
	end
})

-- üßç WalkSpeed Slider
MainTab:CreateSlider({
	Name = "WalkSpeed",
	Range = {5, 100},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = walkSpeed,
	Flag = "SpeedSlider",
	Callback = function(val)
		walkSpeed = val
	end
})

-- ü¶ò Jump Power Slider
MainTab:CreateSlider({
	Name = "Jump Power",
	Range = {20, 150},
	Increment = 5,
	Suffix = "Power",
	CurrentValue = jumpPower,
	Flag = "JumpPowerSlider",
	Callback = function(val)
		jumpPower = val
		local human = plr.Character and plr.Character:FindFirstChild("Humanoid")
		if human then
			human.UseJumpPower = true
			human.JumpPower = val
		end
	end
})

-- ‚úàÔ∏è Glide Power Slider
MainTab:CreateSlider({
	Name = "Dribble Glide Power",
	Range = {10, 200},
	Increment = 5,
	Suffix = "Glide",
	CurrentValue = glidePower,
	Flag = "GlideSlider",
	Callback = function(val)
		glidePower = val
	end
})

-- üîÑ SpinBot Toggle
ExtraTab:CreateToggle({
	Name = "SpinBot",
	CurrentValue = false,
	Flag = "SpinToggle",
	Callback = function(val)
		spinBot = val
	end
})

-- üìü Dribble Cooldown Label (dynamic)
local cooldownLabel = ExtraTab:CreateParagraph({
	Title = "Last Dribble:",
	Content = "Not used yet."
})

-- üé® Cosmetics Section (UI Only)
CosmeticTab:CreateParagraph({
	Title = "Coming Soon!",
	Content = "Unlockable hats, shoes, particles, and more!"
})

-- üü¢ Auto Green Hook
local mt = getrawmetatable(game)
setreadonly(mt, false)
local oldNamecall = mt.__namecall

mt.__namecall = newcclosure(function(self, ...)
	local method = getnamecallmethod()
	local args = { ... }

	if not checkcaller() and method == "FireServer" and tostring(self) == "Shoot" then
		if autoGreen then
			args[2] = -0.98
		end
		return oldNamecall(self, unpack(args))
	end

	return oldNamecall(self, ...)
end)

-- üö∂ Constant Stat Sync (WalkSpeed, JumpPower, SpinBot)
RunService.Heartbeat:Connect(function()
	local human = plr.Character and plr.Character:FindFirstChild("Humanoid")
	if human then
		human.WalkSpeed = walkSpeed
		human.UseJumpPower = true
		human.JumpPower = jumpPower
	end

	if spinBot and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
		plr.Character.HumanoidRootPart.CFrame *= CFrame.Angles(0, math.rad(5), 0)
	end
end)

-- üèÄ Dribble Glide Logic
local lastDribbleTime = 0
local glideDuration = 0.7
local dribbleRemote = ReplicatedStorage:FindFirstChild("Dribble") or ReplicatedStorage:FindFirstChildWhichIsA("RemoteEvent", true)

if dribbleRemote then
	dribbleRemote.OnClientEvent:Connect(function()
		lastDribbleTime = tick()
		cooldownLabel:Set({
			Content = "Last: " .. os.date("%H:%M:%S")
		})

		local root = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
		if root then
			local dir = root.CFrame.LookVector
			local bodyVel = Instance.new("BodyVelocity")
			bodyVel.Velocity = dir * glidePower
			bodyVel.MaxForce = Vector3.new(1e5, 0, 1e5)
			bodyVel.P = 1e4
			bodyVel.Parent = root
			game.Debris:AddItem(bodyVel, glideDuration)
		end
	end)
end

-- üì± Mobile Glide Button
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
local Button = Instance.new("TextButton", ScreenGui)
Button.Size = UDim2.new(0, 100, 0, 40)
Button.Position = UDim2.new(0.85, 0, 0.85, 0)
Button.Text = "Glide"
Button.BackgroundColor3 = Color3.fromRGB(50, 150, 255)
Button.TextColor3 = Color3.new(1, 1, 1)
Button.TextScaled = true
Button.Visible = true

Button.MouseButton1Click:Connect(function()
	local root = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
	if root then
		local dir = root.CFrame.LookVector
		local bodyVel = Instance.new("BodyVelocity")
		bodyVel.Velocity = dir * glidePower
		bodyVel.MaxForce = Vector3.new(1e5, 0, 1e5)
		bodyVel.P = 1e4
		bodyVel.Parent = root
		game.Debris:AddItem(bodyVel, glideDuration)
	end
end)
