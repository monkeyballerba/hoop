local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")
local root = char:WaitForChild("HumanoidRootPart")

local autoGreen = false
local glideSpeed = 50

local library = getgenv().library
if not library then
    error("Octohook library not loaded")
end

-- Create main container frame using library.utility:Instance
local gui = library.utility:Instance("ScreenGui", {Parent = player:WaitForChild("PlayerGui"), Name = "ArcadeUI"})

local container = library.utility:Instance("Frame", {
    Parent = gui,
    Size = UDim2.new(0, 300, 0, 230),
    Position = UDim2.new(0.5, -150, 0.5, -115),
    BackgroundColor3 = Color3.fromRGB(20, 20, 20),
    BackgroundTransparency = 0.1,
    BorderSizePixel = 0,
    Name = "Container",
    Active = true,
    Draggable = true,
})

-- Title Label
local title = library.utility:Instance("TextLabel", {
    Parent = container,
    Size = UDim2.new(1, 0, 0, 35),
    Text = "üèÄ Arcade Basketball",
    BackgroundTransparency = 1,
    TextColor3 = Color3.new(1,1,1),
    Font = Enum.Font.GothamBold,
    TextSize = 20,
})

-- Auto Green Toggle Button
local toggle = library.utility:Instance("TextButton", {
    Parent = container,
    Position = UDim2.new(0.05, 0, 0, 45),
    Size = UDim2.new(0.9, 0, 0, 35),
    Text = "Enable Auto Green",
    BackgroundColor3 = Color3.fromRGB(30,30,30),
    TextColor3 = Color3.new(1,1,1),
    Font = Enum.Font.Gotham,
    TextSize = 16,
})

toggle.MouseButton1Click:Connect(function()
    autoGreen = not autoGreen
    toggle.Text = autoGreen and "‚úÖ Auto Green ON" or "‚ùå Auto Green OFF"
    toggle.BackgroundColor3 = autoGreen and Color3.fromRGB(20,150,20) or Color3.fromRGB(50,30,30)
end)

-- Dribble Glide Label
local glideLabel = library.utility:Instance("TextLabel", {
    Parent = container,
    Position = UDim2.new(0.05, 0, 0, 90),
    Size = UDim2.new(0.9, 0, 0, 20),
    BackgroundTransparency = 1,
    Text = "Dribble Glide Speed: " .. glideSpeed,
    TextColor3 = Color3.new(1,1,1),
    Font = Enum.Font.Gotham,
    TextSize = 14,
})

-- Glide Speed TextBox (Slider replacement)
local glideSlider = library.utility:Instance("TextBox", {
    Parent = container,
    Position = UDim2.new(0.05, 0, 0, 115),
    Size = UDim2.new(0.9, 0, 0, 30),
    BackgroundColor3 = Color3.fromRGB(40,40,40),
    Text = tostring(glideSpeed),
    TextColor3 = Color3.new(1,1,1),
    Font = Enum.Font.GothamSemibold,
    TextSize = 16,
    ClearTextOnFocus = false,
})

glideSlider.FocusLost:Connect(function()
    local new = tonumber(glideSlider.Text)
    if new then
        glideSpeed = math.clamp(new, 10, 150)
        glideLabel.Text = "Dribble Glide Speed: " .. glideSpeed
    else
        glideSlider.Text = tostring(glideSpeed) -- reset if invalid input
    end
end)

-- Glide key (G) functionality
UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.G then
        if root then
            root.Velocity = root.CFrame.LookVector * glideSpeed + Vector3.new(0, 20, 0)
        end
    end
end)

-- Auto Green Hook
local bb
bb = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local m = getnamecallmethod()
    local args = {...}
    if not checkcaller() and m == 'FireServer' and tostring(self) == 'Shoot' then
        if autoGreen and args[1] == false then
            args[2] = -0.98
        end
    end
    return bb(self, unpack(args))
end))})
title.Parent = windowFrame
table.insert(windowFrame.Children, title)

-- Auto Green Toggle
local autoGreenToggle = CreateToggle(windowFrame, UDim2.new(0, 10, 0, 40), "Auto Green", autoGreen, function(val)
    autoGreen = val
end)

-- Glide Speed Slider
local glideSpeedSlider = CreateSlider(windowFrame, UDim2.new(0, 10, 0, 90), 10, 150, glideSpeed, function(val)
    glideSpeed = val
end)

--// Glide key binding
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.G and root then
        root.Velocity = root.CFrame.LookVector * glideSpeed + Vector3.new(0, 20, 0)
    end
end)

--// Hook for Auto Green
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}
    if not checkcaller() and method == 'FireServer' and tostring(self) == 'Shoot' then
        if autoGreen and args[1] == false then
            args[2] = -0.98
        end
    end
    return oldNamecall(self, unpack(args))
end))        callback(val)
    end
    
    sliderFrame.MouseButton1Down:Connect(function(inputPos)
        dragging = true
        UpdateSlider(inputPos.X)
    end)
    
    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            UpdateSlider(input.Position.X)
        end
    end)
    
    UIS.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    return sliderFrame
end

-- Create main window
local windowPos = UDim2.new(0.5, -150, 0.5, -115)
local windowSize = UDim2.new(0, 300, 0, 230)

local windowFrame = library.utility:Draw('Square', {
    Position = windowPos,
    Size = windowSize,
    Visible = true,
    ThemeColor = "Background",
    Class = "Window"
})

-- Title
local title = library.utility:Draw('Text', {
    Position = UDim2.new(0, 0, 0, 5),
    Size = UDim2.new(1, 0, 0, 30),
    Text = "üèÄ Arcade Basketball",
    Visible = true,
    ThemeColor = "Primary Text",
    Font = 2,
    TextSize = 22,
    Class = "Text"
})
title.Parent = windowFrame
table.insert(windowFrame.Children, title)

-- Auto Green Toggle
local autoGreenToggle = CreateToggle(windowFrame, UDim2.new(0, 10, 0, 40), "Auto Green", autoGreen, function(val)
    autoGreen = val
end)
autoGreenToggle.Parent = windowFrame
table.insert(windowFrame.Children, autoGreenToggle)

-- Glide Speed Slider
local glideSpeedSlider = CreateSlider(windowFrame, UDim2.new(0, 10, 0, 90), 10, 150, glideSpeed, function(val)
    glideSpeed = val
end)
glideSpeedSlider.Parent = windowFrame
table.insert(windowFrame.Children, glideSpeedSlider)

--// Glide key binding
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.G and root then
        root.Velocity = root.CFrame.LookVector * glideSpeed + Vector3.new(0, 20, 0)
    end
end)

--// Hook for Auto Green
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = {...}
    if not checkcaller() and method == 'FireServer' and tostring(self) == 'Shoot' then
        if autoGreen and args[1] == false then
            args[2] = -0.98
        end
    end
    return oldNamecall(self, unpack(args))
end))
