-- ⚠️ Load Rayfield UI Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- 🪟 Window
local Window = Rayfield:CreateWindow({
    Name = "🏀 Arcade BB 🏀",
    LoadingTitle = "Loading GUI...",
    LoadingSubtitle = "by Lazy",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ArcadeBB", -- folder in workspace
        FileName = "ArcadeBB_Config"
    },
    Discord = {
        Enabled = true,
        Invite = "ura", -- Your invite code
        RememberJoins = true
    },
    KeySystem = false,
    ToggleUIKeybind = Enum.KeyCode.K
})

-- ⚙️ Settings
local autoGreen = false
local autoGuard = false
local ws = 16
local plr = game.Players.LocalPlayer
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local char = plr.Character or plr.CharacterAdded:Wait()

-- 📁 Tab
local MainTab = Window:CreateTab("Main", 1234567890) -- Replace with any imageId or use Lucide Icon name string

-- 🔘 Auto Green Toggle
MainTab:CreateToggle({
    Name = "Auto Green",
    CurrentValue = false,
    Flag = "AutoGreenToggle",
    Callback = function(val)
        autoGreen = val
    end
})

-- 🧍 WalkSpeed Slider
MainTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {5, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = ws,
    Flag = "SpeedSlider",
    Callback = function(val)
        ws = val
    end
})

-- 🛡️ Auto Guard Toggle
MainTab:CreateToggle({
    Name = "Auto Guard",
    CurrentValue = false,
    Flag = "AutoGuardToggle",
    Callback = function(val)
        autoGuard = val
    end
})

-- ✈️ Glide Instruction
MainTab:CreateParagraph({Title = "Glide Key", Content = "Press [G] to glide forward."})

-- 🟢 Auto Green Hook
local mt = getrawmetatable(game)
setreadonly(mt, false)
local oldNamecall = mt.__namecall

mt.__namecall = newcclosure(function(self, ...)
    local method = getnamecallmethod()
    local args = { ... }

    if not checkcaller() and method == "FireServer" and tostring(self) == "Shoot" then
        if autoGreen then
            args[2] = -0.98
        end
        return oldNamecall(self, unpack(args))
    end

    return oldNamecall(self, ...)
end)

-- 🚶 Apply WalkSpeed continuously
RunService.Heartbeat:Connect(function()
    local human = plr.Character and plr.Character:FindFirstChild("Humanoid")
    if human then
        human.WalkSpeed = ws
    end
end)

-- 🕊️ Glide on [G]
UIS.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.G then
        local root = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
        if root then
            root.Velocity = root.CFrame.LookVector * 75 + Vector3.new(0, 20, 0)
        end
    end
end)

-- 🛡️ Auto Guard Logic
local function getBallHandler()
    local closest, dist = nil, math.huge
    for _, p in pairs(game.Players:GetPlayers()) do
        if p ~= plr and p.Team ~= plr.Team and p.Character then
            local hrp = p.Character:FindFirstChild("HumanoidRootPart")
            if hrp and p.Character:FindFirstChild("Basketball") then
                local myHRP = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
                if myHRP then
                    local d = (myHRP.Position - hrp.Position).Magnitude
                    if d < dist and d < 50 then
                        closest = hrp
                        dist = d
                    end
                end
            end
        end
    end
    return closest
end

-- 🔁 Auto Guard Movement
RunService.RenderStepped:Connect(function()
    if autoGuard and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
        local myHRP = plr.Character.HumanoidRootPart
        local target = getBallHandler()

        if target then
            local frontPos = target.Position + (target.CFrame.LookVector * -2)
            local moveDir = (frontPos - myHRP.Position).Unit * ws
            myHRP.Velocity = Vector3.new(moveDir.X, myHRP.Velocity.Y, moveDir.Z)
        end
    end
end)
    return oldNamecall(self, ...)
end)
